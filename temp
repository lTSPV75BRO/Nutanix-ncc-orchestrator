<html>
<head>
<meta charset="utf-8">
<title>NCC Aggregated Report</title>
<style>
:root {
  --bg: #0f172a;
  --card: #111827;
  --text: #e5e7eb;
  --muted: #9ca3af;
  --accent: #2563eb;
  --row1: #0b1224;
  --row2: #0e1630;
  --border: #1f2937;
  --fail: #ef4444;
  --warn: #f59e0b;
  --info: #3b82f6;
  --details: #aaa;
  --err:  #94a3b8;
}
* { box-sizing: border-box; }
html, body { height: 100%; }
body {
  margin: 0;
  font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;
  background: linear-gradient(180deg,#0b1224,#0e1630);
  color: var(--text);
}
.container { max-width: 1200px; margin: 24px auto; padding: 0 16px; }
.header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px; }
.title h1 { margin: 0; font-size: 22px; font-weight: 700; }
.title .sub { color: var(--muted); font-size: 12px; }
.controls { display: flex; flex-wrap: wrap; gap: 12px; align-items: center; margin: 12px 0 18px 0; }
.control { background: #0d152b; border: 1px solid var(--border); border-radius: 10px; padding: 10px 12px; display: flex; gap: 8px; align-items: center; }
.control label { font-size: 12px; color: var(--muted); margin-right: 6px; }
input[type="text"] { background: #0a1123; border: 1px solid var(--border); color: var(--text); padding: 8px 10px; border-radius: 8px; outline: none; width: 280px; }
select, button { background: #0a1123; border: 1px solid var(--border); color: var(--text); padding: 8px 10px; border-radius: 8px; outline: none; }
button:hover { border-color: var(--accent); cursor: pointer; }
.badge { display:inline-flex; align-items:center; gap:6px; padding: 6px 10px; border-radius: 999px; background:#0a1123; border:1px solid var(--border); user-select:none; }
.badge .dot { width: 8px; height: 8px; border-radius: 999px; display:inline-block; }
.dot.fail{ background: var(--fail); } .dot.warn{ background: var(--warn); }
.dot.info{ background: var(--info); } .dot.err{ background: var(--err); }
.legend { display:flex; gap:8px; flex-wrap: wrap; }
.card { background: #0d152b; border: 1px solid var(--border); border-radius: 12px; padding: 12px; }

/* Summary counters visible */
.summary { display:grid; grid-template-columns: repeat(5, 1fr); gap:12px; margin: 16px 0; }
.sum-item { background: #0a1123; border: 1px solid var(--border); border-radius: 10px; padding: 10px; }
.sum-item .label { font-size: 12px; color: var(--muted); }
.sum-item .count { font-size: 18px; font-weight: 700; margin-top: 6px; }
.progress { height: 6px; border-radius: 999px; background: #0d152b; margin-top: 8px; overflow: hidden; border:1px solid var(--border); }
.progress > span { display:block; height:100%; }
.progress.fail > span { background: var(--fail); } .progress.warn > span { background: var(--warn); }
.progress.err  > span { background: var(--err); }  .progress.info > span { background: var(--info); }

/* Scroll container for wide tables */
.scroll { overflow-x: auto; overflow-y: hidden; }
.scroll::-webkit-scrollbar { height: 10px; }
.scroll::-webkit-scrollbar-thumb { background: #22304d; border-radius: 8px; }
.scroll::-webkit-scrollbar-track { background: #0a1123; }

/* Table */
table { width: 100%; border-collapse: collapse; table-layout: fixed; }
thead th {
  position: sticky; top: 0; z-index: 1;
  background: #0d152b; border-bottom: 1px solid var(--border);
  padding: 10px; text-align: left; font-size: 12px; color: var(--muted);
}
tbody td { padding: 10px; border-bottom: 1px solid var(--border); vertical-align: top; }
thead th, tbody td { overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }

tbody tr:nth-child(odd) { background: var(--row1); }
tbody tr:nth-child(even){ background: var(--row2); }

td .severity { padding: 2px 8px; border-radius: 999px; font-size: 12px; }
.sev-FAIL { background: #2b0d0d; color: var(--fail); border: 1px solid #4c1d1d; }
.sev-WARN { background: #2b1f0d; color: var(--warn); border: 1px solid #4a3112; }
.sev-INFO { background: #0c1f35; color: var(--info); border: 1px solid #173e6d; }
.sev-ERR  { background: #1b2130; color: var(--err);  border: 1px solid #2c354a; }

small.mono { color: var(--muted); font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }
.highlight { background: #3b82f655; }

/* Column sizing */
th.col-cluster, td.col-cluster   { width: 140px; }
th.col-sev,     td.col-sev       { width: 96px; }
th.col-title,   td.col-title     { width: 240px; }
th.col-kb,      td.col-kb        { width: 110px; }
th.col-detail,  td.col-detail    { width: 640px; }
th.col-actions, td.col-actions   { width: 220px; }

td.col-detail { white-space: normal; overflow: visible; }
.detail-full { color: var(--details); font-size: 13px; line-height: 1.35; }

/* Actions */
tbody tr.selected { outline: 2px solid var(--accent); outline-offset: -2px; }
.actions { white-space: nowrap; display: inline-flex; gap: 6px; flex-wrap: wrap; }
.actions button { background:#0a1123; border:1px solid var(--border); color:var(--text); padding:6px 8px; border-radius:8px; }
.actions button:hover { border-color: var(--accent); cursor:pointer; }

/* Link styling (URLs) */
a { color: #93c5fd; text-decoration: none; }
a:hover { text-decoration: underline; color: #bfdbfe; }
a:visited { color: #a5b4fc; }
a[href^="http"]::after {
  content: "↗";
  font-size: 11px;
  margin-left: 4px;
  color: #64748b;
}
  /* Custom checkbox - hide default */
.control input[type="checkbox"] {
position: absolute;
opacity: 0;
cursor: pointer;
height: 0;
width: 0;
}


.control span {
display: flex;
align-items: center;
justify-content: center;
position: relative;
padding-left: 24px;
min-height: 16px; /* Match box height */
cursor: pointer;
color: var(--muted);
}


.control span::before {
content: "";
position: absolute;
top: 50%;
left: 0;
transform: translateY(-50%); /* Vertically center the box itself */
height: 16px;
width: 16px;
background-color: #0a1123;
border: 1px solid var(--border);
border-radius: 4px;
box-sizing: border-box; /* Ensure border is included in size */
}


.control span::after {
content: "";
width: 9px;
height: 9px;
background-color: var(--muted);
position: absolute;
top: 50%;
left: 8px; /* Half of box width (16px / 2 = 8px) for horizontal center */
transform: translate(-50%, -50%) scale(0); /* Vertical center with translate */
transition: transform 0.2s ease-in-out;
border-radius: 2px;
}


.control input[type="checkbox"]:checked ~ span::after {
transform: translate(-50%, -50%) scale(1);
}


/* Hover effect on box */
.control span:hover::before {
border-color: var(--accent);
}


/* Focus effect for accessibility */
.control input[type="checkbox"]:focus + span::before {
outline: 2px solid var(--accent);
}

</style>
<script>
// Embedded data
const AGG = {{.JSON}};

// State
let state = {
  sortKey: "Cluster",
  sortDir: "asc",
  filterSev: new Set(["FAIL","WARN","ERR","INFO"]),
  filterClusters: new Set(),
  search: ""
};

const sevRank = { FAIL: 1, WARN: 2, ERR: 3, INFO: 4 };
let selIndex = -1;

function init() {
  buildClusterFilter();
  updateAndRender();
  document.addEventListener("keydown", onKey);
}

function buildClusterFilter() {
  const clusters = Array.from(new Set(AGG.map(r => r.Cluster))).sort();
  const sel = document.getElementById("clusterSel");
  sel.innerHTML = "";
  clusters.forEach(c => {
    const opt = document.createElement("option");
    opt.value = c; opt.textContent = c;
    sel.appendChild(opt);
  });
  state.filterClusters = new Set(clusters); // select all by default
  sel.size = Math.min(6, clusters.length);
}

function setSev(checked, sev) {
  if (checked) state.filterSev.add(sev); else state.filterSev.delete(sev);
  updateAndRender();
}

function onClusterChange(sel) {
  const chosen = new Set(Array.from(sel.selectedOptions).map(o => o.value));
  if (chosen.size === 0) {
    Array.from(sel.options).forEach(o => o.selected = true);
    chosen.clear(); Array.from(sel.options).forEach(o => chosen.add(o.value));
  }
  state.filterClusters = chosen;
  updateAndRender();
}

function onSearch(inp) {
  state.search = inp.value.trim();
  updateAndRender();
}

let debounceTimer;
function onSearchDebounced(inp) {
  clearTimeout(debounceTimer);
  debounceTimer = setTimeout(() => onSearch(inp), 150);
}

function sortBy(key) {
  if (state.sortKey === key) state.sortDir = state.sortDir === "asc" ? "desc" : "asc";
  else { state.sortKey = key; state.sortDir = "asc"; }
  updateAndRender();
}

function filterData() {
  const needle = state.search.toLowerCase();
  return AGG.filter(r => {
    if (!state.filterSev.has(r.Severity)) return false;
    if (!state.filterClusters.has(r.Cluster)) return false;
    if (!needle) return true;
    const hay = (r.Cluster + " " + r.Severity + " " + r.Check + " " + r.Detail).toLowerCase();
    return hay.includes(needle);
  });
}

function sortData(rows) {
  const k = state.sortKey, dir = state.sortDir;
  const mul = dir === "asc" ? 1 : -1;
  rows.sort((a,b) => {
    let av = a[k], bv = b[k];
    if (k === "Severity") { av = sevRank[av] || 99; bv = sevRank[bv] || 99; }
    return (av > bv ? 1 : av < bv ? -1 : 0) * mul;
  });
  return rows;
}

function updateCounts(rows) {
  const total = rows.length;
  const cnt = { FAIL:0, WARN:0, ERR:0, INFO:0 };
  rows.forEach(r => { if (cnt[r.Severity] !== undefined) cnt[r.Severity]++; });

  document.getElementById("countTotal").textContent = total;
  document.getElementById("countFail").textContent = cnt.FAIL;
  document.getElementById("countWarn").textContent = cnt.WARN;
  document.getElementById("countErr").textContent  = cnt.ERR;
  document.getElementById("countInfo").textContent = cnt.INFO;

  const pct = {};
  Object.keys(cnt).forEach(k => pct[k] = total ? Math.round(cnt[k]*100/total) : 0);
  document.getElementById("barFail").style.width = pct.FAIL + "%";
  document.getElementById("barWarn").style.width = pct.WARN + "%";
  document.getElementById("barErr").style.width  = pct.ERR  + "%";
  document.getElementById("barInfo").style.width = pct.INFO + "%";

  // Per-cluster summary with links
  const pc = document.getElementById("perCluster");
  pc.innerHTML = "";
  const map = {};
  rows.forEach(r => {
    map[r.Cluster] = map[r.Cluster] || { FAIL:0,WARN:0,ERR:0,INFO:0, total:0 };
    map[r.Cluster][r.Severity]++; map[r.Cluster].total++;
  });
  const table = document.createElement("table");
  table.innerHTML = '<thead><tr><th>Cluster</th><th>FAIL</th><th>WARN</th><th>ERR</th><th>INFO</th><th>Total</th></tr></thead><tbody></tbody>';
  const tb = table.querySelector("tbody");
  Object.keys(map).sort().forEach(c => {
    const m = map[c];
    const tr = document.createElement("tr");
    const link = encodeURIComponent(c) + '.log.html';
    tr.innerHTML =
      '<td><a class="mono" href="' + link + '">' + escapeHtml(c) + '</a></td>' +
      '<td><span class="severity sev-FAIL">' + m.FAIL + '</span></td>' +
      '<td><span class="severity sev-WARN">' + m.WARN + '</span></td>' +
      '<td><span class="severity sev-ERR">'  + m.ERR  + '</span></td>' +
      '<td><span class="severity sev-INFO">' + m.INFO + '</span></td>' +
      '<td>' + m.total + '</td>';
    tb.appendChild(tr);
  });
  pc.appendChild(table);
}

function extractKB(detail) {
  const text = detail || "";
  const re = /(https?:\/\/[^\s)]+portal\.nutanix\.com\/kb\/\d+|https?:\/\/[^\s)]+)/i;
  const m = text.match(re);
  return m ? m[0] : "";
}
function kbLabel(url) {
  if (!url) return "";
  const m = url.match(/\/kb\/(\d+)\b/i);
  return m ? ('KB-' + m[1]) : 'KB';
}

function escapeHtml(s) {
  return (s || "").toString()
    .replaceAll("&","&amp;").replaceAll("<","&lt;").replaceAll(">","&gt;")
    .replaceAll('"',"&quot;").replaceAll("'","&#39;");
}

function highlight(text, needle) {
  if (!needle) return escapeHtml(text);
  const re = new RegExp("(" + needle.replace(/[.*+?^${}()|[\\]\\\\]/g, "\\$&") + ")", "ig");
  return escapeHtml(text).replace(re, '<span class="highlight">$1</span>');
}

function formatCheckTitle(s) {
  s = s || "";
  return s.replace(/^detailed information for\s*/i, "").replace(/:$/, "");
}

function jsEscape(s) {
  return (s || "").toString()
    .replaceAll("\\", "\\\\").replaceAll("\n", "\\n").replaceAll("\r", " ")
    .replaceAll("'", "\\'").replaceAll("\"", "\\\"");
}

async function copyText(text) {
  try { await navigator.clipboard.writeText(text); }
  catch {
    const ta = document.createElement("textarea");
    ta.value = text; document.body.appendChild(ta);
    ta.select(); document.execCommand("copy");
    document.body.removeChild(ta);
  }
}

function renderTable(rows) {
  const tbody = document.getElementById("tbody");
  tbody.innerHTML = "";
  const needle = state.search;
  const frag = document.createDocumentFragment();
  rows.forEach((r, idx) => {
    const tr = document.createElement("tr");
    tr.setAttribute("tabindex", "0");
    tr.dataset.index = idx.toString();

    const detailEsc = (r.Detail || "").replaceAll("\\n","<br>");

    const kb = extractKB(r.Detail);
    const kbCell = kb ? ('<a href="' + kb + '" target="_blank" rel="noopener">' + kbLabel(kb) + '</a>') : '';

    const rowText = (r.Cluster + " " + r.Severity + " " + r.Check + " " + (r.Detail || "")).trim();
    const actHTML =
      '<div class="actions">' +
      '<button onclick="copyText(\'' + jsEscape(rowText) + '\')">Copy row</button>' +
      '<button onclick="copyText(\'' + jsEscape(r.Detail || "") + '\')">Copy detail</button>' +
      '</div>';
    const checkTitle = formatCheckTitle(r.Check || "");
    tr.innerHTML =
      '<td class="col-cluster"><small class="mono">' + highlight(r.Cluster, needle) + '</small></td>' +
      '<td class="col-sev"><span class="severity sev-' + r.Severity + '">' + r.Severity + '</span></td>' +
      '<td class="col-title"><small class="mono">' + highlight(checkTitle, needle) + '</small></td>' +
      '<td class="col-kb">' + kbCell + '</td>' +
      '<td class="col-detail"><div class="detail-full">' + highlight(detailEsc, needle) + '</div></td>' +
      '<td class="col-actions">' + actHTML + '</td>';

    tr.addEventListener("focus", () => selectRow(tr));
    frag.appendChild(tr);
  });
  tbody.appendChild(frag);
}

function selectRow(tr) {
  const tbody = document.getElementById("tbody");
  Array.from(tbody.querySelectorAll("tr.selected")).forEach(x => x.classList.remove("selected"));
  tr.classList.add("selected");
  selIndex = parseInt(tr.dataset.index || "-1", 10);
}

function focusRow(i) {
  const rows = document.querySelectorAll("#tbody tr");
  if (!rows.length) return;
  if (i < 0) i = 0;
  if (i >= rows.length) i = rows.length - 1;
  selIndex = i;
  const tr = rows[i];
  tr.focus({preventScroll:false});
  selectRow(tr);
  tr.scrollIntoView({block:"nearest", inline:"nearest"});
}

function onKey(e) {
  const k = e.key;
  if (k === "/") {
    e.preventDefault();
    const sb = document.getElementById("searchBox");
    sb.focus(); sb.select();
    return;
  }
  if (k === "Escape") {
    if (state.search) {
      state.search = ""; document.getElementById("searchBox").value = "";
      updateAndRender();
    }
    return;
  }
  if (k === "ArrowDown") { e.preventDefault(); focusRow(selIndex + 1); return; }
  if (k === "ArrowUp")   { e.preventDefault(); focusRow(selIndex - 1); return; }
}

function updateAndRender() {
  let rows = filterData();
  // Update visible counters
  const total = rows.length;
  const cnt = { FAIL:0, WARN:0, ERR:0, INFO:0 };
  rows.forEach(r => { if (cnt[r.Severity] !== undefined) cnt[r.Severity]++; });
  document.getElementById("countTotal").textContent = total;
  document.getElementById("countFail").textContent = cnt.FAIL;
  document.getElementById("countWarn").textContent = cnt.WARN;
  document.getElementById("countErr").textContent  = cnt.ERR;
  document.getElementById("countInfo").textContent = cnt.INFO;
  const pct = {};
  Object.keys(cnt).forEach(k => pct[k] = total ? Math.round(cnt[k]*100/total) : 0);
  document.getElementById("barFail").style.width = pct.FAIL + "%";
  document.getElementById("barWarn").style.width = pct.WARN + "%";
  document.getElementById("barErr").style.width  = pct.ERR  + "%";
  document.getElementById("barInfo").style.width = pct.INFO + "%";

  // Per-cluster summary and table
  updateCounts(rows);
  rows = sortData(rows.slice());
  renderTable(rows);
}

function downloadCSV() {
    const rows = filterData();
    const headers = ["Cluster","Severity","NCC Alert Title","Detail"];
    const lines = [headers.join(",")];
    rows.forEach(r => {
      const title = formatCheckTitle(r.Check || "");
      const row = [r.Cluster, r.Severity, title, r.Detail || ""].map(v => {
        const s = (v ?? "").toString().replaceAll('"','""').replaceAll("\r"," ").replaceAll("\n","\\n");
        return '"' + s + '"';
      }).join(",");
      lines.push(row);
    });
  const blob = new Blob([lines.join("\n")], {type: "text/csv;charset=utf-8;"});
  triggerDownload(blob, "aggregated_filtered.csv");
}

function downloadJSON() {
  const rows = filterData();
  const blob = new Blob([JSON.stringify(rows, null, 2)], {type: "application/json;charset=utf-8;"});
  triggerDownload(blob, "aggregated_filtered.json");
}

function triggerDownload(blob, name) {
  const a = document.createElement("a");
  a.href = URL.createObjectURL(blob);
  a.download = name;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
}
</script>
</head>
<body onload="init()">
<div class="container">
  <div class="header">
    <div class="title">
      <h1>NCC Aggregated Report</h1>
      <div class="sub">Generated at {{.GeneratedAt}}</div>
    </div>
    <!--
    <div class="legend">
      <span class="badge"><span class="dot fail"></span> FAIL</span>
      <span class="badge"><span class="dot warn"></span> WARN</span>
      <span class="badge"><span class="dot err"></span> ERR</span>
      <span class="badge"><span class="dot info"></span> INFO</span>
    </div>
    -->
  </div>

  <div class="controls">
    <div class="control">
      <label>Search</label>
      <input id="searchBox" type="text" placeholder="Type to filter..." oninput="onSearchDebounced(this)" />
    </div>
    <div class="control">
      <label>Severity</label>
<label>
<input type="checkbox" checked onchange="setSev(this.checked,'FAIL')">
<span>FAIL</span>
</label>
<label>
<input type="checkbox" checked onchange="setSev(this.checked,'WARN')">
<span>WARN</span>
</label>
<label>
<input type="checkbox" checked onchange="setSev(this.checked,'ERR')">
<span>ERR</span>
</label>
<label>
<input type="checkbox" checked onchange="setSev(this.checked,'INFO')">
<span>INFO</span>
</label>
    </div>
    <div class="control">
      <label>Clusters</label>
      <select id="clusterSel" multiple onchange="onClusterChange(this)"></select>
    </div>
    <div class="control">
      <button onclick="downloadCSV()">Export CSV</button>
      <button onclick="downloadJSON()">Export JSON</button>
    </div>
  </div>

  <div class="summary">
    <div class="sum-item">
      <div class="label">Total</div>
      <div class="count" id="countTotal">0</div>
    </div>
    <div class="sum-item">
      <div class="label">FAIL</div>
      <div class="count" id="countFail">0</div>
      <div class="progress fail"><span id="barFail" style="width:0%"></span></div>
    </div>
    <div class="sum-item">
      <div class="label">WARN</div>
      <div class="count" id="countWarn">0</div>
      <div class="progress warn"><span id="barWarn" style="width:0%"></span></div>
    </div>
    <div class="sum-item">
      <div class="label">ERR</div>
      <div class="count" id="countErr">0</div>
      <div class="progress err"><span id="barErr" style="width:0%"></span></div>
    </div>
    <div class="sum-item">
      <div class="label">INFO</div>
      <div class="count" id="countInfo">0</div>
      <div class="progress info"><span id="barInfo" style="width:0%"></span></div>
    </div>
  </div>

  <div class="card" style="margin-bottom:14px">
    <div class="label" style="margin-bottom:8px">Per-Cluster Summary</div>
    <div id="perCluster"></div>
  </div>

  <div class="card">
    <div class="scroll">
      <table>
        <thead>
          <tr>
            <th class="col-cluster" onclick="sortBy('Cluster')">Cluster</th>
            <th class="col-sev" onclick="sortBy('Severity')">Severity</th>
            <th class="col-title" onclick="sortBy('Check')">NCC Alert Title</th>
            <th class="col-kb">KB</th>
            <th class="col-detail">Detail</th>
            <th class="col-actions">Actions</th>
          </tr>
        </thead>
        <tbody id="tbody"></tbody>
      </table>
    </div>
  </div>

 <footer class="report-footer">
Keyboard: “/” to focus search, ↑/↓ to move, Esc to clear search. Full details visible in table.
</footer>


<style>
.report-footer {
    font-size: 0.8125rem;
    color: #666; /* Better contrast than #aaa */
    margin-bottom: 0;
    padding: 10px; /* Adds breathing room */
    bottom: 0;
    left: 0;
    width: 100%;
}
</style>
</div>
</body>
</html>